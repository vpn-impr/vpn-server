from typing import TYPE_CHECKING

import brotli
from aiofiles.os import access
from aiogram import Router
from aiogram.enums.content_type import ContentType
from aiogram.filters import Command
from django.utils.regex_helper import contains

from bot.keyboards import servers_buttons, profile_payed_inline_keyboard, profile_not_payed_inline_keyboard, \
    available_cities_buttons, download_outline_inline_keyboard
from core.servers.utils import get_server_name_by_key, \
    get_can_change_location_by_key, get_access_key, get_available_countries, get_available_cities, change_user_city, \
    get_ssconf
from core.users.utils import get_user
from aiogram.types import Message, CallbackQuery, BufferedInputFile, InputMediaPhoto
from aiogram import F

from core.utils.datetimes import get_now
from PIL import Image, ImageDraw
from io import BytesIO
import aiohttp
from aiogram.types import FSInputFile
from aiogram import types

import re

from core.utils.myhome import aget_realty_data_by_id, download_image, apply_watermark, download_image_as_pil

router = Router()
router.message

WATERMARK_URL = 'https://storage.yandexcloud.net/s3r.aurora-estate.ge/locahost-other/RostomashviliHouse_60.png'


@router.message(Command(commands=["start"]))
async def handle_start_command(message: Message) -> None:
    if message.from_user is None:
        return

    user, is_new = await get_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )

    if is_new:
        await message.answer(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üöÄ\n\n'
            '–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"\n'
            '–í –ø–æ–¥–ø–∏—Å–∫–µ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –ª—é–±—ã–µ –ª–æ–∫–∞—Ü–∏–∏. –°–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å'
        )
    else:
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    await handle_profile_command(message)

#–ö—É–ø–∏—Ç—å
@router.message(Command(commands=["buy"]))
async def handle_buy_command(message: Message) -> None:
    if message.from_user is None:
        return

    user, is_new = await get_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )

    await message.answer(
        '–¢–∞—Ä–∏—Ñ—ã\n\n'
        f'1 –ú–µ—Å—è—Ü: 500 –†—É–±–ª–µ–π\n'
        f'3 –ú–µ—Å—è—Ü–∞: 1400 –†—É–±–ª–µ–π\n'
        f'6 –ú–µ—Å—è—Ü–µ–≤: 2700 –†—É–±–ª–µ–π\n'
        f'12 –ú–µ—Å—è—Ü–µ–≤: 5100 –†—É–±–ª–µ–π'
    )
    await message.answer(
        '–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @greenvpnoutline_admin\n'
        f'–í–∞—à ID: {user.id}'
    )

# –ö—É–ø–∏—Ç—å callback
@router.callback_query(lambda c: c.data and c.data == 'buy_action')
async def handle_buy_callback(callback: CallbackQuery) -> None:
    if callback.from_user is None:
        return

    user, is_new = await get_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
    )

    await callback.message.answer(
        '–¢–∞—Ä–∏—Ñ—ã\n\n'
        f'1 –ú–µ—Å—è—Ü: 500 –†—É–±–ª–µ–π\n'
        f'3 –ú–µ—Å—è—Ü–∞: 1400 –†—É–±–ª–µ–π\n'
        f'6 –ú–µ—Å—è—Ü–µ–≤: 2700 –†—É–±–ª–µ–π\n'
        f'12 –ú–µ—Å—è—Ü–µ–≤: 5100 –†—É–±–ª–µ–π'
    )
    await callback.message.answer(
        '–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @greenvpnoutline_admin\n'
        f'–í–∞—à ID: {user.id}'
    )

# –ü—Ä–æ—Ñ–∏–ª—å
@router.message(Command(commands=["profile"]))
async def handle_profile_command(message: Message) -> None:
    if message.from_user is None:
        return

    user, is_new = await get_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )

    subscription_text = '–ü–æ–¥–ø–∏—Å–∫–∞: –ù–µ–∞–∫—Ç–∏–≤–Ω–∞\n'
    server_text = None
    reply_markup = await profile_not_payed_inline_keyboard()
    can_change_location = True

    if user.subscription_expire_datetime and user.subscription_expire_datetime > get_now():
        time_remaining = user.subscription_expire_datetime - get_now()

        # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –Ω–∞ –¥–Ω–∏, —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
        days = time_remaining.days
        hours, remainder = divmod(time_remaining.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Å—Ç–∞–≤—à–∏–º—Å—è –≤—Ä–µ–º–µ–Ω–µ–º
        subscription_text = f'–ü–æ–¥–ø–∏—Å–∫–∞: –ê–∫—Ç–∏–≤–Ω–∞\n–î–æ –∫–æ–Ω—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {days}–¥ {hours}—á {minutes}–º'

        server_text = await get_server_name_by_key(user.outline_server_key_id)
        can_change_location = await get_can_change_location_by_key(user.outline_server_key_id)
        reply_markup = await profile_payed_inline_keyboard(can_change_location, user.outline_server_key_id)

    result_text = f'<b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n' + f'{subscription_text}\n'
    if server_text:
        result_text = result_text + f'–õ–æ–∫–∞—Ü–∏—è: {server_text}\n'
    if not can_change_location:
        result_text = result_text + f'\n<i>–°–º–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –ú–µ–Ω—è—Ç—å –ª–æ–∫–∞—Ü–∏—é –º–æ–∂–Ω–æ 1 —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É.</i>\n'

    await message.answer(result_text, reply_markup=reply_markup)

# –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
@router.callback_query(lambda c: c.data and c.data.startswith('get_access_key'))
async def handle_get_access_key_callback(callback: CallbackQuery) -> None:
    if callback.from_user is None:
        return

    user, is_new = await get_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
    )

    access_key = await get_access_key(user.outline_server_key_id)
    if access_key is None:
        text = '–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω'
    else:
        text = '–í–∞—à –∫–ª—é—á:'
    await callback.message.answer(text)
    if access_key:
        await callback.message.answer(f'{await get_ssconf(access_key)}')


# –ì–æ—Ä–æ–¥–∞
@router.message(Command(commands=["cities"]))
async def handle_cities_command(message: Message) -> None:
    if message.from_user is None:
        return

    user, is_new = await get_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )

    cities = await get_available_cities()

    if not user.subscription_active():
        text = '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–ø—É–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –≤ –ø–æ–¥–ø–∏—Å–∫–µ:\n'
        async for city in cities:
            text += f'{city.dynamic_name}\n'
        await message.answer(text)
    else:
        reply_markup = await available_cities_buttons(cities)
        await message.answer('–°–º–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:', reply_markup=reply_markup)

@router.callback_query(lambda c: c.data and c.data == 'cities')
async def handle_cities_callback(callback: CallbackQuery) -> None:
    if callback.from_user is None:
        return

    user, is_new = await get_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
    )

    cities = await get_available_cities()

    if not user.subscription_active():
        text = '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–ø—É–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –≤ –ø–æ–¥–ø–∏—Å–∫–µ:\n'
        async for city in cities:
            text += f'{city.dynamic_name}\n'
        await callback.message.answer(text)
    else:
        reply_markup = await available_cities_buttons(cities)
        await callback.message.answer('–°–º–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:', reply_markup=reply_markup)

@router.callback_query(lambda c: c.data and c.data.startswith('get_city_'))
async def handle_get_city_callback(callback: CallbackQuery) -> None:
    if callback.from_user is None:
        return

    user, is_new = await get_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
    )

    city = await get_available_cities(callback.data.split('get_city_')[-1])
    if city is None:
        await callback.message.answer('–î–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–π.')

    status, _ = await change_user_city(user, city)
    if status:
        await callback.message.answer(f'–õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞.\n–ù–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è: {city.dynamic_name}.\n–í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–∞—à –Ω–æ–≤—ã–π –∫–ª—é—á.')
        await callback.message.answer(f'{await get_ssconf(_)}')
        await callback.message.edit_reply_markup(reply_markup=None)
    else:
        await callback.message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é: {_}')




# –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
@router.message(Command(commands=["setup"]))
async def handle_setup_command(message: Message) -> None:
    if message.from_user is None:
        return

    user, is_new = await get_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )

    reply_markup = await download_outline_inline_keyboard()

    await message.answer(
        '<b>–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å GreenVPN</b>\n\n'
        'GreenVPN –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –±—É–∫–≤–∞–ª—å–Ω–æ –≤ –¥–≤–∞-—Ç—Ä–∏ –∫–ª–∏–∫–∞.\n\n'
        '–ù—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline, –æ–Ω–æ –µ—Å—Ç—å –Ω–∞ –ª—é–±–æ–π —Å–∏—Å—Ç–µ–º–µ (Android, iOS, Windows, MacOS).\n'
        '–°—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—ã –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –≤–Ω–∏–∑—É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n'
        '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã –ø—Ä–∏—à–ª—ë–º —Å—Å—ã–ª–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á. –ï—Å–ª–∏ Outline —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Å—ã–ª–∫–µ, –∫–ª—é—á –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ VPN –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç).\n\n'
        '–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –∏–ª–∏ —É –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É @greenvpnoutline_admin .\n\n',
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
@router.message(F.photo)
async def handle_images(message: Message) -> None:
    if message.from_user is None:
        return
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
    outputs = []
    async with aiohttp.ClientSession() as session:
        watermark = await download_image(session, WATERMARK_URL)

        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_buffers = []
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if message.photo:
            #print(message.photo)
            photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
            # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            file_id = photo.file_id
            file = await download_image_as_pil(file_id, message.bot)
            try:
                image_with_watermark = apply_watermark(file, watermark)
                file.close()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
                output = BytesIO()
                image_with_watermark.save(output, format="JPEG")
                output.seek(0)

                image_buffers.append(
                    types.InputMediaPhoto(
                        media=BufferedInputFile(output.getvalue(), filename="image_with_watermark.jpg"))
                )
                outputs.append(output)

            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ
        if image_buffers:
            batch_size = 10  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ –±–æ–ª–µ–µ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
            for i in range(0, len(image_buffers), batch_size):
                media_group = image_buffers[i:i + batch_size]
                await message.answer_media_group(media_group)
    for output in outputs:
        output.close()


# –í—ã–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —Å myhome.ge
@router.message()
async def handle_myhome_get_image_command(message: Message) -> None:
    if message.from_user is None:
        return

    text = message.text.lower()

    if 'myhome.ge' in text:

        for i in text.split(' '):
            if 'myhome.ge' in i:
                link = i

        little = False
        need_orig = False
        need_add_to_db = False
        if ' –º–∞–ª' in text:
            little = True
        if ' –æ—Ä–∏–≥' in text:
            need_orig = True
        if ' –¥–æ–±–∞–≤' in text:
            need_add_to_db = True

        pattern = r"https?://(?:www\.)?myhome\.ge/(?:[a-z]{2}/)?pr/(\d+)/"
        match = re.match(pattern, link)
        mid = match.group(1) if match else None
        if mid is None:
            await message.answer(f"–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å")
            return

        data = await aget_realty_data_by_id(mid)
        outputs = []

        async with aiohttp.ClientSession() as session:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
            watermark = await download_image(session, WATERMARK_URL)

            image_buffers = []
            for i, image_url in enumerate(data["images_links"]):
                try:
                    image = await download_image(session, image_url)
                    if not need_orig:
                        image_with_watermark = apply_watermark(image, watermark, little)
                    else:
                        image_with_watermark = image

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
                    output = BytesIO()
                    image_with_watermark.save(output, format="JPEG")
                    output.seek(0)

                    image_buffers.append(
                        InputMediaPhoto(media=BufferedInputFile(output.getvalue(), filename=f"image_{i + 1}.jpg"))
                    )
                    outputs.append(output)
                    image.close()
                except Exception as e:
                    await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 10 —Ñ–∞–π–ª–æ–≤
            batch_size = 10
            for i in range(0, len(image_buffers), batch_size):
                media_group = []
                for file in image_buffers[i:i + batch_size]:
                    media_group.append(file)
                await message.answer_media_group(media_group)
        for output in outputs:
            output.close()
        if need_add_to_db:
            await message.answer("–î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–∏—Å—Ç–µ–º—É")
            url_aur = 'https://api.rem.auora-estate.ge/v1/pre_approve_by_myhome/approve/'
            headers = {'Authorization': 'Token f4254f25dde331cac97959872d614eaaef7ca2a2'}
            try:
                async with session.post(url_aur, headers=headers, data={'myhome_id': str(mid)}) as response:
                    if response.ok:
                        await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                    else:
                        error_text = await response.text()
                        await message.answer(f"–û—à–∏–±–∫–∞: {error_text}")
            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
    else:
        await message.answer(f"–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å")