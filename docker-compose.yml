version: "3.7"

services:
  socket-proxy:
    image: tecnativa/docker-socket-proxy:0.1.1
    container_name: socket-proxy
    restart: always
    userns_mode: host
    networks:
      - proxy
    environment:
      CONTAINERS: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
  reverse-proxy:
    image: traefik:v2.8
    container_name: reverse-proxy
    restart: always
    networks:
      - proxy
      - traefik
    ports:
      - 80:80
      - 443:443/tcp
    volumes:
      - letsencrypt:/letsencrypt
    command:
      - --global.sendAnonymousUsage=false
      - --api.dashboard=true
      - --experimental.http3=true
      - --providers.docker
      - --providers.docker.exposedByDefault=false
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      # HTTP
      - --entrypoints.web.address=:80
      # HTTPS
      - --entrypoints.web-secure.address=:443
      - --entrypoints.web-secure.http3
      - --entrypoints.web-secure.forwardedHeaders.trustedIPs=127.0.0.1/32,10.0.0.0/8,192.168.0.0/16,172.16.0.0/12
      - --entrypoints.web-secure.http.middlewares=security-headers
      - --entrypoints.web-secure.http.tls.domains[0].main=${DOMAIN:?Domain required}
      - --entrypoints.web-secure.http.tls.domains[0].sans=s1.${DOMAIN:?Domain required},traefik.${DOMAIN:?Domain required}
      # Certificate resolver
      - --entrypoints.web-secure.http.tls.certResolver=leresolver
      - --certificatesresolvers.leresolver.acme.tlschallenge=true
      - --certificatesresolvers.leresolver.acme.email=${EMAIL:?Email required}
      - --certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json
    labels:
      - traefik.enable=true
      # Router: https-redirect
      - traefik.http.routers.https-redirect.rule=HostRegexp(`{any:.+}`)
      - traefik.http.routers.https-redirect.entrypoints=web
      - traefik.http.routers.https-redirect.middlewares=https-redirect
      # Router: traefik-dashboard
      - traefik.http.routers.traefik-dashboard.entrypoints=web-secure
      - traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN:?Domain required}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      - traefik.http.routers.traefik-dashboard.service=api@internal
      - traefik.http.routers.traefik-dashboard.middlewares=traefik-dashboard-auth
      # Middleware: https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # Middleware: security-headers
      - traefik.http.middlewares.security-headers.headers.frameDeny=true
      - traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true
      - traefik.http.middlewares.security-headers.headers.browserXssFilter=true
      - traefik.http.middlewares.security-headers.headers.referrerPolicy=origin
      - traefik.http.middlewares.security-headers.headers.stsSeconds=63072000
      - traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true
      # Middleware: rate-limit
      - traefik.http.middlewares.rate-limit.ratelimit.average=80
      - traefik.http.middlewares.rate-limit.ratelimit.period=1m
      - traefik.http.middlewares.rate-limit.ratelimit.burst=50
      # Middleware: traefik-dashboard-auth
      - traefik.http.middlewares.traefik-dashboard-auth.basicauth.users=${DASHBOARD_USERS:?Dashboard users required}
    depends_on:
      - socket-proxy
  backend:
    build: .
    volumes:
      - .:/app
      - static_volume:/app/static
      - media_volume:/app/media
    env_file:
      - .env
    restart: always
    depends_on:
      - redis
    ports:
      - 8000:8000
    networks:
      - traefik
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.entrypoints=web-secure
      - traefik.http.routers.backend.priority=50
      - traefik.http.routers.backend.rule=Host(`s1.${DOMAIN:?Domain required}`)
  bot:
    build: .
    command: python -m bot
    depends_on:
      - backend
    restart: always
    volumes:
      - .:/application
    env_file:
      - .env
    networks:
      - traefik
  static:
    image: nginx:1.20.1
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/static/
    restart: always
    depends_on:
      - backend
    networks:
      - traefik
    labels:
      - traefik.enable=true
      - traefik.http.routers.static-files.entrypoints=web-secure
      - traefik.http.routers.static-files.priority=100
      - traefik.http.routers.static-files.rule=Host(`s1.${DOMAIN:?Domain required}`) && PathPrefix(`/static`)
  db:
    image: postgres:latest
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_INITDB_ARGS: --auth=md5
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - traefik
  pgbouncer:
    image: edoburu/pgbouncer:latest
    restart: unless-stopped
    depends_on:
      - db
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=1000
      - DEFAULT_POOL_SIZE=20
      - MIN_POOL_SIZE=5
      - RESERVE_POOL_SIZE=5
      - RESERVE_POOL_TIMEOUT=5
      - SERVER_RESET_QUERY=DISCARD ALL
      - SERVER_CHECK_QUERY=select 1
      - LOG_CONNECTIONS=1
      - LOG_DISCONNECTIONS=1
      - LOG_POOLER_ERRORS=1
      - STATS_PERIOD=60
      - AUTH_TYPE=md5
    volumes:
      - pgbouncer-data:/var/lib/pgbouncer
    networks:
      - traefik
  redis:
    image: redis:alpine
    command: redis-server --save 900 1 --save 300 10 --save 60 10000 --appendonly yes --appendfsync everysec --auto-aof-rewrite-percentage 100 --auto-aof-rewrite-min-size 64mb --requirepass ${REDIS_PASSWORD:?REDIS_PASSWORD variable is not set}
    volumes:
      - ./redis_data:/data
    env_file:
      - .env
    restart: always
    networks:
      - traefik

volumes:
  letsencrypt:
  postgres-data:
  pgbouncer-data:
  redis_data:
  static_volume:
  media_volume:

networks:
  proxy:
  traefik:
    external: true